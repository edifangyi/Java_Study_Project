<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0034)http://www.javaeye.com/topic/64789 -->
<HTML dir=ltr xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>(转) java程序员面试之150++ (上) - - Job - JavaEye论坛</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META 
content="今天无意中看到这篇文章,写的蛮全,有实用价值,顺手转过来,问题的答案不一定都是正确的,也不是最全面的.还是希望对大家有帮助.  一、Java基础方面   1、作用域public,private,protected,以及不写时的区别   　　答：区别如下：   　　作用域&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当前类&nbsp;&nbsp;&nbsp;&nbsp;&amp; ..." 
name=description>
<META content="java 面试笔试  Job" name=keywords><LINK href="/images/favicon.ico" 
type=image/x-icon rel="shortcut icon"><LINK title=JavaEye论坛 
href="/rss/board/Job" type=application/rss+xml rel=alternate><LINK media=screen 
href="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/forum.css" type=text/css 
rel=stylesheet>
<SCRIPT src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/application.js" 
type=text/javascript></SCRIPT>
<LINK media=screen 
href="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/SyntaxHighlighter.css" 
type=text/css rel=stylesheet>
<SCRIPT src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/shCoreCommon.js" 
type=text/javascript></SCRIPT>

<SCRIPT src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/hotkey.js" 
type=text/javascript></SCRIPT>

<SCRIPT src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/dragdrop.js" 
type=text/javascript></SCRIPT>

<META content="MSHTML 6.00.2900.2604" name=GENERATOR></HEAD>
<BODY>
<DIV id=page>
<DIV class=clearfix id=header>
<UL id=user_nav>
  <LI class=last><A href="http://www.javaeye.com/index/help">帮助</A> </LI>
  <LI><A href="http://www.javaeye.com/signup">注册</A> </LI>
  <LI><A href="http://www.javaeye.com/login">登录</A> </LI>
  <LI class=highlight><SPAN>您还没有登录 !</SPAN> </LI></UL>
<DIV id=branding><A href="http://www.javaeye.com/"><IMG 
title=JavaEye-最棒的软件开发交流社区 alt=JavaEye3.0 
src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/logo.gif"></A> </DIV>
<DIV id=ad>
<SCRIPT type=text/javascript>
            Event.observe(window,'load',function() {
              $("ad").innerHTML = '<a href=\'/adverts/48\' target=\'_blank\'><embed play="true" src="http://ftp.javaeye.com/public/ibm/bbs.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" height="60" loop="true" menu="true" width="720"></embed></a>';
            });
          </SCRIPT>
</DIV></DIV>
<DIV class=clearfix id=content>
<DIV id=main>
<DIV class=clearfix>
<DIV class=crumbs><A href="http://www.javaeye.com/forums">论坛首页</A> <SPAN 
class=arrow>→</SPAN> <A href="http://www.javaeye.com/forums/board/Job">招聘求职版</A> 
<SPAN class=arrow>→</SPAN> 
<H1>(转) java程序员面试之150++ (上)</H1></DIV></DIV>
<DIV id=forum_tag_list><A href="http://www.javaeye.com/forums/board/Job">全部</A> 
<A href="http://www.javaeye.com/forums/tag/company">企业点评</A> <A 
href="http://www.javaeye.com/forums/tag/career">职场话题</A> <A 
href="http://www.javaeye.com/forums/tag/findjob">求职经验</A> <A 
href="http://www.javaeye.com/forums/tag/interview">面试秘籍</A> <A 
href="http://www.javaeye.com/forums/tag/list_jobs">招聘职位</A> </DIV>
<DIV class=actions>
<DIV class=buttons></DIV>
<DIV class=wrapper>
<DIV id=forum_advert_b0></DIV>
<DIV class=info>浏览 4187 次</DIV></DIV></DIV>
<TABLE id=forum_main cellSpacing=1>
  <THEAD>
  <TR>
    <TH class=topic_title colSpan=2>
      <DIV class=wrapper><SPAN class=locked>锁定老贴子</SPAN> <A 
      href="http://www.javaeye.com/topic/64789">主题：(转) java程序员面试之150++ 
      (上)</A></DIV>
      <DIV id=topic_rate_box>精华帖 (0) :: 良好帖 (0) :: 隐藏帖 (0)</DIV></TH></TR>
  <TR>
    <TD class=first_col>作者</TD>
    <TD class=last_col>正文</TD></TR></THEAD>
  <TBODY id=posts>
  <TR id=p_246750>
    <TD class=postauthor>
      <UL>
        <LI class=name>ppeter 
        <LI>等级: <IMG title=一星会员 alt=一星会员 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/star1.gif"> 
        <LI><A href="http://3www.javaeye.com/" target=_blank><IMG 
        title="ppeter的博客: Longgo" alt=用户头像 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/6c1db15d-4e6d-3be8-bc8f-fb8f39e644d8.jpg"></A> 

        <LI>性别: <IMG title=男 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/icon_minigender_1.gif"> 

        <LI>文章: 46 
        <LI>积分: 123 
        <LI>来自: 杭州 
        <LI><IMG 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/offline.gif"> 
        </LI></UL></TD>
    <TD class=postcontent>
      <DIV class=postactions>
      <DIV class=description>最后更新时间：2007-03-22 关键字: <STRONG>java 
      面试笔试</STRONG></DIV>
      <DIV class=links></DIV></DIV>
      <DIV class="postbody clearfix">
      <DIV id=related_topics>相关文章: <SPAN class=close><A title=关闭 
      onclick="$('related_topics').hide();return false;" 
      href="http://www.javaeye.com/topic/64789#">&nbsp;</A></SPAN> 
      <UL>
        <LI><A href="http://www.javaeye.com/topic/153734" target=_blank>j2ee笔试题目 
        servlet笔试题目 jsp 笔试题目 java笔试题目</A> 
        <LI><A href="http://www.javaeye.com/topic/34289" 
        target=_blank>Java经典面试题</A> </LI></UL><BR><SPAN>推荐圈子: <A 
      href="http://dlang.group.javaeye.com/" target=_blank>D语言</A></SPAN> <BR><A 
      href="http://www.javaeye.com/wiki/topic/64789" target=_blank>更多相关推荐</A> 
      </DIV>
      <SCRIPT type=text/javascript>
            new Draggable("related_topics");
          </SCRIPT>

      <P>今天无意中看到这篇文章,写的蛮全,有实用价值,顺手转过来,问题的答案不一定都是正确的,也不是最全面的.还是希望对大家有帮助.<IMG 
      alt="" src=""></P>
      <P>一、Java基础方面 </P>
      <P>1、作用域public,private,protected,以及不写时的区别 </P>
      <P>　　答：区别如下： </P>
      <P>　　作用域&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      当前类&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 同一package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      子孙类&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      其他package<BR>　　public&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      √&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      √&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      √&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      √<BR>　　protected&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      √&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      √&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      √&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      ×<BR>　　friendly&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      √&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      √&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      ×&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      ×<BR>　　private&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      √&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      ×&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      ×&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      × </P>
      <P>　　不写时默认为friendly </P>
      <P>2、Anonymous Inner Class (匿名内部类) 
      是否可以extends(继承)其它类，是否可以implements(实现)interface(接口) </P>
      <P>　　答：匿名的内部类是没有名字的内部类。可以继承抽象(SDK1.5没有限制)，但一个内部类可以作为一个接口，由另一个内部类实现 </P>
      <P>3、Static Nested Class 和 Inner Class的不同 </P>
      <P>　　答：Nested Class （一般是C++的说法），Inner Class 
      (一般是JAVA的说法)。Java内部类与C++嵌套类最大的不同就在于是否有指向外部的引用上。注： 静态内部类（Inner 
      Class）意味着1创建一个static内部类的对象，不需要一个外部类对象，2不能从一个static内部类的一个对象访问一个外部类对象 </P>
      <P>4、&amp;和&amp;&amp;的区别 </P>
      <P>　　答：&amp;是位运算符，表示按位与运算，&amp;&amp;是逻辑运算符，表示逻辑与（and） </P>
      <P>5、Collection 和 Collections的区别 </P>
      <P>　　答：Collection是集合类的上级接口，继承与他的接口主要有Set 
      和List.<BR>Collections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作 </P>
      <P>6、什么时候用assert </P>
      <P>　　答：assertion(断言)在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告或退出。一般来说，assertion用于保证程序最基本、关键的正确性。assertion检查通常在开发和测试时开启。为了提高性能，在软件发布后，assertion检查通常是关闭的 
      </P>
      <P>7、String s = new String("xyz");创建了几个String Object </P>
      <P>　　答："xyz"本身作为字符常量，在汇编语言中应该作为常量放在数据段，Java有一个类似数据段的constant 
      pool保存这个常量，在classloader加载这个类的时候就把"xyz"和这个类的其他一些信息放在constant&nbsp;&nbsp; 
      pool&nbsp; new&nbsp;&nbsp; 
      String("xyz")根据常量"xyz"在heap上创建String对象所以，一共两个对象&nbsp;<BR>&nbsp; 
      &nbsp;String(String&nbsp;&nbsp; original)&nbsp; Initializes&nbsp;&nbsp; 
      a&nbsp;&nbsp; newly&nbsp;&nbsp; created&nbsp;&nbsp; String&nbsp;&nbsp; 
      object&nbsp;&nbsp; so&nbsp;&nbsp; that&nbsp;&nbsp; it&nbsp;&nbsp; 
      represents&nbsp;&nbsp; the&nbsp;&nbsp; same&nbsp; sequence&nbsp;&nbsp; 
      of&nbsp;&nbsp; characters&nbsp;&nbsp; as&nbsp;&nbsp; the&nbsp;&nbsp; 
      argument;&nbsp;&nbsp; in&nbsp;&nbsp; other&nbsp;&nbsp; words,&nbsp;&nbsp; 
      the&nbsp;&nbsp; newly&nbsp;&nbsp; created&nbsp;&nbsp; string&nbsp;&nbsp; 
      is&nbsp;&nbsp; a&nbsp;&nbsp; copy&nbsp;&nbsp; of&nbsp; the&nbsp;&nbsp; 
      argument&nbsp;&nbsp; string.&nbsp;&nbsp; <BR>&nbsp; </P>
      <P>8、Math.round(11.5)等於多少? Math.round(-11.5)等於多少 </P>
      <P>　　答: 
      Math.round(11.5)==12;Math.round(-11.5)==-11;round方法返回与参数最接近的长整数，参数加1/2后求其floor 
      </P>
      <P>9、short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错 </P>
      <P>　　答：short s1 = 1; s1 = s1 + 1; （s1+1运算结果是int型，需要强制转换类型）short s1 = 1; s1 
      += 1;（可以正确编译） </P>
      <P>10、Java有没有goto </P>
      <P>　　答：java中的保留字，现在没有在java中使用 </P>
      <P>11、数组有没有length()这个方法? String有没有length()这个方法 </P>
      <P>　　答：数组没有length()这个方法，有length的属性。String有length()这个方法 </P>
      <P>12、Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型 </P>
      <P>　　答：方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 
      (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被"屏蔽"了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型 
      </P>
      <P>13、Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别 </P>
      <P>　　答：Set里的元素是不能重复的，那么用iterator()方法来区分重复与否。equals()是判断两个Set是否相等, 
      equals()和==方法决定引用值是否指向同一对象equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值 </P>
      <P>14、给我一个你最常见到的runtime exception </P>
      <P>　　答：常见的运行时异常有如下这些ArithmeticException, ArrayStoreException, 
      BufferOverflowException, BufferUnderflowException, CannotRedoException, 
      CannotUndoException, ClassCastException, CMMException, 
      ConcurrentModificationException, DOMException, EmptyStackException, 
      IllegalArgumentException, IllegalMonitorStateException, 
      IllegalPathStateException, IllegalStateException, ImagingOpException, 
      IndexOutOfBoundsException, MissingResourceException, 
      NegativeArraySizeException, NoSuchElementException, NullPointerException, 
      ProfileDataException, ProviderException, RasterFormatException, 
      SecurityException, SystemException, UndeclaredThrowableException, 
      UnmodifiableSetException, UnsupportedOperationException </P>
      <P>15、error和exception有什么区别 </P>
      <P>　　答：error 表示恢复不是不可能但很困难的情况下的一种严重问题，比如说内存溢出，不可能指望程序能处理这样的情况；exception 
      表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况 </P>
      <P>16、List, Set, Map是否继承自Collection接口 </P>
      <P>　　答：List，Set是，Map不是 </P>
      <P>17、abstract class和interface有什么区别 </P>
      <P>　　答：声明方法的存在而不去实现它的类被叫做抽象类（abstract 
      class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建abstract 
      类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向具体子类的一个实例。不能有抽象构造函数或抽象静态方法。Abstract 
      类的子类为它们父类中的所有抽象方法提供实现，否则它们也是抽象类为。取而代之，在子类中实现该方法。知道其行为的其它类可以在类中实现这些方法 </P>
      <P>　　接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。多继承性可通过实现这样的接口而获得。接口中的所有方法都是抽象的，没有一个有程序体。接口只可以定义static 
      final成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。然后，它可以在实现了该接口的类的任何对象上调用接口的方法。由于有抽象类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到接口类型或从接口类型转换，instanceof 
      运算符可以用来决定某对象的类是否实现了接口 </P>
      <P>18、abstract的method是否可同时是static,是否可同时是native，是否可同时是synchronized </P>
      <P>　　答：都不能 </P>
      <P>19、接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承实体类(concrete class) </P>
      <P>　　答：接口可以继承接口。抽象类可以实现(implements)接口，抽象类是否可继承实体类，但前提是实体类必须有明确的构造函数 </P>
      <P>20、构造器Constructor是否可被override </P>
      <P>　　答：构造器Constructor不能被继承，因此不能重写Overriding，但可以被重载Overloading </P>
      <P>21、是否可以继承String类 </P>
      <P>　　答：String类是final类故不可以继承 </P>
      <P>22、try {}里有一个return语句，那么紧跟在这个try后的finally 
      {}里的code会不会被执行，什么时候被执行，在return前还是后 </P>
      <P>　　答：会执行，在return前执行 </P>
      <P>23、用最有效率的方法算出2乘以8等於几 </P>
      <P>　　答：2 &lt;&lt; 3 </P>
      <P>24、两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对 </P>
      <P>　　答：不对，有相同的hash code </P>
      <P>25、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递 </P>
      <P>　　答：是值传递。Java 
      编程语言只有值传递参数。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的内容可以在被调用的方法中改变，但对象的引用是永远不会改变的 
      </P>
      <P>26、swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上 </P>
      <P>　　答：switch（expr1）中，expr1是一个整数表达式。因此传递给 switch 和 case 语句的参数应该是 int、 
      short、 char 或者 byte。long,string 都不能作用于swtich </P>
      <P>27、ArrayList和Vector的区别,HashMap和Hashtable的区别 </P>
      <P>　　答：就ArrayList与Vector主要从二方面来说： </P>
      <P>　　1、同步性:Vector是线程安全的，也就是说是同步的，而ArrayList是线程序不安全的，不是同步的 </P>
      <P>　　2、数据增长:当需要增长时,Vector默认增长为原来一倍，而ArrayList却是原来的一半 </P>
      <P>　　就HashMap与HashTable主要从三方面来说： </P>
      <P>　　1、历史原因:Hashtable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现 </P>
      <P>　　2、同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的 </P>
      <P>　　3、值：只有HashMap可以让你将空值作为一个表的条目的key或value </P>
      <P>28、char型变量中能不能存贮一个中文汉字?为什么? </P>
      <P>　　答：是能够定义成为一个中文的，因为java中以unicode编码，一个char占16个字节，所以放一个中文是没问题的<BR>&nbsp;如果用gbk的本地编码的话可以.如果用utf-8的话，可能不行。 
      </P>
      <P>29、GC是什么? 为什么要有GC </P>
      <P>　　答：GC是垃圾收集的意思（Gabage 
      Collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。 
      </P>
      <P>30、float型float f=3.4是否正确? </P>
      <P>　　答:不正确。精度不准确,应该用强制类型转换，如下所示：float f=(float)3.4; float f = 3.4f; </P>
      <P>31、介绍JAVA中的Collection FrameWork(包括如何写自己的数据结构)? </P>
      <P>　　答：Collection FrameWork如下： </P>
      <P>&nbsp; Collection<BR>&nbsp; ├List<BR>&nbsp; │├LinkedList<BR>&nbsp; 
      │├ArrayList<BR>&nbsp; │└Vector<BR>&nbsp; │　└Stack<BR>&nbsp; └Set<BR>&nbsp; 
      Map<BR>&nbsp; ├Hashtable<BR>&nbsp; ├HashMap<BR>&nbsp; 
      └WeakHashMap<BR>　　Collection是最基本的集合接口，一个Collection代表一组Object，即Collection的元素（Elements） 
      </P>
      <P>　　Map提供key到value的映射 </P>
      <P>32、抽象类与接口？ </P>
      <P>　　答：抽象类与接口都用于抽象，但是抽象类(JAVA中)可以有自己的部分实现，而接口则完全是一个标识(同时有多实现的功能)。 </P>
      <P>　　JAVA类实现序例化的方法是实现java.io.Serializable接口 </P>
      <P>　　Collection框架中实现比较要实现Comparable 接口和 Comparator 接口 </P>
      <P>33、STRING与STRINGBUFFER的区别。 </P>
      <P>　　答：STRING的长度是不可变的，STRINGBUFFER的长度是可变的。如果你对字符串中的内容经常进行操作，特别是内容要修改时，那么使用StringBuffer，如果最后需要String，那么使用StringBuffer的toString()方法 
      </P>
      <P>34、谈谈final, finally, finalize的区别 </P>
      <P>　　答：final—修饰符（关键字）如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 
      abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中不被改变。被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为final的方法也同样只能使用，不能重载 
      </P>
      <P>　　finally—再异常处理时提供 finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 catch 
      子句就会执行，然后控制就会进入 finally 块（如果有的话） </P>
      <P>　　finalize—方法名。Java 技术允许使用 finalize() 
      方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在 Object 
      类中定义的，因此所有的类都继承了它。子类覆盖 finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 
      方法是在垃圾收集器删除对象之前对这个对象调用的 </P>
      <P>35、面向对象的特征有哪些方面 </P>
      <P>　　答：主要有以下四方面： </P>
      <P>　　1.抽象：抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。 
      </P>
      <P>　　2.继承：继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。 
      </P>
      <P>　　3.封装：封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。 
      </P>
      <P>　　4. 
      多态性：多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。 
      </P>
      <P>36、String是最基本的数据类型吗 </P>
      <P>　　答：不是，基本数据类型包括byte、int、char、long、float、double、boolean和short。<BR>java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类 
      </P>
      <P>37、int 和 Integer 有什么区别 </P>
      <P>　　答：Java 提供两种不同的类型：引用类型和原始类型（或内置类型）。 </P>
      <P>　　Int是java的原始数据类型，Integer是java为int提供的wapper。Java为每个原始类型提供了封装类。 </P>
      <P>　　原始类型封装类:<BR>　　boolean : Boolean<BR>　　char : Character<BR>　　byte : 
      Byte<BR>　　short : Short<BR>　　int : Integer<BR>　　long : Long<BR>　　float : 
      Float<BR>　　double : Double </P>
      <P>　　引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 
      null，而原始类型实例变量的缺省值与它们的类型有关 </P>
      <P>38、运行时异常与一般异常有何异同 </P>
      <P>　　答：异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。java编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。 
      </P>
      <P>39、说出ArrayList,Vector, LinkedList的存储性能和特性 </P>
      <P>　　答：ArrayList和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList差，而LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。 
      </P>
      <P>40、HashMap和Hashtable的区别 </P>
      <P>　　答：HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，效率上可能高于Hashtable。 
      </P>
      <P>　　HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。 </P>
      <P>　　HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让人引起误解。 
      </P>
      <P>　　Hashtable继承自Dictionary类，而HashMap是Java1.2引进的Map interface的一个实现。 </P>
      <P>　　最大的不同是，Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap 
      就必须为之提供外同步。 </P>
      <P>　　Hashtable和HashMap采用的hash/rehash算法都大概一样，所以性能不会有很大的差异。 </P>
      <P>41、heap和stack有什么区别 </P>
      <P>　　答：栈是一种线形集合，其添加和删除元素的操作应在同一段完成。栈按照后进先出的方式进行处理。堆是栈的一个组成元素 </P>
      <P>42、Java的接口和C++的虚类的相同和不同处 </P>
      <P>　　答：由于Java不支持多继承，而有可能某个类或对象要使用分别在几个类或对象里面的方法或属性，现有的单继承机制就不能满足要求。与继承相比，接口有更高的灵活性，因为接口中没有任何实现代码。当一个类实现了接口以后，该类要实现接口里面所有的方法和属性，并且接口里面的属性在默认状态下面都是public 
      static,所有方法默认情况下是public.一个类可以实现多个接口。 </P>
      <P>43、Java中的异常处理机制的简单原理和应用 </P>
      <P>　　答：当JAVA程序违反了JAVA的语义规则时，JAVA虚拟机就会将发生的错误表示为一个异常。违反语义规则包括2种情况。一种是JAVA类库内置的语义检查。例如数组下标越界,会引发IndexOutOfBoundsException;访问null的对象时会引发NullPointerException。另一种情况就是JAVA允许程序员扩展这种语义检查，程序员可以创建自己的异常，并自由选择在何时用throw关键字引发异常。所有的异常都是java.lang.Thowable的子类。 
      </P>
      <P>43、垃圾回收的优点和原理。并考虑2种回收机制 </P>
      <P>　　答：Java语言中一个显著的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解，它使得Java程序员在编写程序的时候不再需要考虑内存管理。垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清楚和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。回收机制有分代复制垃圾回收和标记垃圾回收，增量垃圾回收。 
      </P>
      <P>44、你所知道的集合类都有哪些？主要方法？ </P>
      <P>　　答：最常用的集合类是 List 和 Map。 List 的具体实现包括 ArrayList 和 
      Vector，它们是可变大小的列表，比较适合构建、存储和操作任何类型对象的元素列表。 List 适用于按数值索引访问元素的情形。 <BR>Map 
      提供了一个更通用的元素存储方法。 Map 集合类用于存储元素对（称作"键"和"值"），其中每个键映射到一个值。 </P>
      <P>45、描述一下JVM加载class文件的原理机制? </P>
      <P>　　答：JVM中类的装载是由ClassLoader和它的子类来实现的,Java ClassLoader 
      是一个重要的Java运行时系统组件。它负责在运行时查找和装入类文件的类。 </P>
      <P>46、排序都有哪几种方法？请列举 </P>
      <P>　　答：排序的方法有：插入排序（直接插入排序、希尔排序），交换排序（冒泡排序、快速排序），选择排序（直接选择排序、堆排序），归并排序，分配排序（箱排序、基数排序）<BR>快速排序的伪代码。 
      </P>
      <P>　　使用快速排序方法对a[0 : n-1]排序： </P>
      <P>　　从a[0 : 
      n-1]中选择一个元素作为middle，该元素为支点，把余下的元素分割为两段left和right，使得left中的元素都小于等于支点，而right中的元素都大于等于支点。 
      </P>
      <P>　　递归地使用快速排序方法对left进行排序 </P>
      <P>　　递归地使用快速排序方法对right 进行排序 </P>
      <P>　　所得结果为left + middle + right </P>
      <P>47、JAVA语言如何进行异常处理，关键字：throws,throw,try,catch,finally分别代表什么意义？在try块中可以抛出异常吗？ 
      </P>
      <P>　　答：Java通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在Java中，每个异常都是一个对象，它是Throwable类或其它子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并进行处理。Java的异常处理是通过5个关键词来实现的：try、catch、throw、throws和finally。一般情况下是用try来执行一段程序，如果出现异常，系统会抛出（throws）一个异常，这时候你可以通过它的类型来捕捉（catch）它，或最后（finally）由缺省处理器来处理。 
      </P>
      <P>　　用try来指定一块预防所有"异常"的程序。紧跟在try程序后面，应包含一个catch子句来指定你想要捕捉的"异常"的类型。 </P>
      <P>　　throw语句用来明确地抛出一个"异常"。 </P>
      <P>　　throws用来标明一个成员函数可能抛出的各种"异常"。 </P>
      <P>　　Finally为确保一段代码不管发生什么"异常"都被执行一段代码。 </P>
      <P>　　可以在一个成员函数调用的外面写一个try语句，在这个成员函数内部写另一个try语句保护其他代码。每当遇到一个try语句，"异常"的框架就放到堆栈上面，直到所有的try语句都完成。如果下一级的try语句没有对某种"异常"进行处理，堆栈就会展开，直到遇到有处理这种"异常"的try语句。 
      </P>
      <P>48、一个".java"源文件中是否可以包括多个类（不是内部类）？有什么限制？ </P>
      <P>　　答：可以。必须只有一个类名与文件名相同。 </P>
      <P>49、java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？ </P>
      <P>　　答：字节流，字符流。字节流继承于InputStream OutputStream，字符流继承于InputStreamReader 
      OutputStreamWriter。在java.io包中还有许多其他的流，主要是为了提高性能和使用方便。 </P>
      <P>50、java中会存在内存泄漏吗，请简单描述。 </P>
      <P>　　答：会。自己实现堆载的数据结构时有可能会出现内存泄露，可参看effective java. </P>
      <P>51、java中实现多态的机制是什么？ </P>
      <P>　　答：方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。 
      </P>
      <P>52、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收 </P>
      <P>　　答：对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小以及使用情况。通常，GC采用有向图的方式记录和管理堆(heap)中的所有对象。通过这种方式确定哪些对象是"可达的"，哪些对象是"不可达的"。当GC确定一些对象为"不可达"时，GC就有责任回收这些内存空间。可以。程序员可以手动执行System.gc()，通知GC运行，但是Java语言规范并不保证GC一定会执行。 
      </P>
      <P>53、静态变量和实例变量的区别？ </P>
      <P><BR>54、什么是java序列化，如何实现java序列化？ </P>
      <P>　　答：序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决在对对象流进行读写操作时所引发的问题。 
      </P>
      <P>　　序列化的实现：将需要被序列化的类实现Serializable接口，该接口没有需要实现的方法，implements 
      Serializable只是为了标注该对象是可被序列化的，然后使用一个输出流(如：FileOutputStream)来构造一个ObjectOutputStream(对象流)对象，接着，使用ObjectOutputStream对象的writeObject(Object 
      obj)方法就可以将参数为obj的对象写出(即保存其状态)，要恢复的话则用输入流。 </P>
      <P>55、是否可以从一个static方法内部发出对非static方法的调用？ </P>
      <P>　　答：不可以,如果其中包含对象的method()；不能保证对象初始化. </P>
      <P>56、写clone()方法时，通常都有一行代码，是什么？ </P>
      <P>　　答：Clone 有缺省行为，super.clone();他负责产生正确大小的空间，并逐位复制。 </P>
      <P>57、在JAVA中，如何跳出当前的多重嵌套循环？ </P>
      <P>　　答：用break; return 方法。 </P>
      <P>58、List、Map、Set三个接口，存取元素时，各有什么特点？ </P>
      <P>　　答：List 以特定次序来持有元素，可有重复元素。Set 无法拥有重复元素,内部排序。Map 保存key-value值，value可多值。 
      </P>
      <P>59、说出一些常用的类，包，接口，请各举5个 </P>
      <P>　　答：常用的类：BufferedReader&nbsp; BufferedWriter&nbsp; FileReader&nbsp; 
      FileWirter&nbsp; String&nbsp; Integer </P>
      <P>　　常用的包：java.lang&nbsp; java.awt&nbsp; java.io&nbsp; java.util&nbsp; 
      java.sql </P>
      <P>　　常用的接口：Remote&nbsp; List&nbsp; Map&nbsp; Runnable Serializable 
      ActionListener </P>
      <P>二、线程编程方面 </P>
      <P>60、java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？ </P>
      <P>　　答：有两种实现方法，分别是继承Thread类与实现Runnable接口 </P>
      <P>　　用synchronized关键字修饰同步方法 </P>
      <P>　　反对使用stop()，是因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题所在。suspend()方法容易发生死锁。调用suspend()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他任何线程都不能访问锁定的资源，除非被"挂起"的线程恢复运行。对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会造成死锁。所以不应该使用suspend()，而应在自己的Thread类中置入一个标志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用wait()命其进入等待状态。若标志指出线程应当恢复，则用一个notify()重新启动线程。 
      </P>
      <P>61、sleep() 和 wait() 有什么区别? </P>
      <P>　　答：sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。 
      </P>
      <P>　　wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。 
      </P>
      <P>62、同步和异步有何异同，在什么情况下分别使用他们？举例说明。 </P>
      <P>　　答：如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。 
      </P>
      <P>　　当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。 
      </P>
      <P>63、启动一个线程是用run()还是start()? </P>
      <P>　　答：启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度并执行。这并不意味着线程就会立即运行。run()方法可以产生必须退出的标志来停止一个线程。 
      </P>
      <P>64、当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法? </P>
      <P>　　答：不能，一个对象的一个synchronized方法只能由一个线程访问。 </P>
      <P>65、请说出你所知道的线程同步的方法。 </P>
      <P>　　答：wait():使一个线程处于等待状态，并且释放所持有的对象的lock。 </P>
      <P>　　sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。 </P>
      <P>　　notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。 
      </P>
      <P>　　Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。 </P>
      <P>66、多线程有几种实现方法,都是什么?同步有几种实现方法,都是什么? </P>
      <P>　　答：多线程有两种实现方法，分别是继承Thread类与实现Runnable接口 
      <BR>同步的实现方面有两种，分别是synchronized,wait与notify </P>
      <P>67、线程的基本概念、线程的基本状态以及状态之间的关系 </P>
      <P>　　答：线程指在程序执行过程中，能够执行程序代码的一个执行单位，每个程序至少都有一个线程，也就是程序本身。 </P>
      <P>　　Java中的线程有四种状态分别是：运行、就绪、挂起、结束 </P>
      <P>68、简述synchronized和java.util.concurrent.locks.Lock的异同 ？ </P>
      <P>　　答：主要相同点：Lock能完成synchronized所实现的所有功能 </P>
      <P>　　主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。 
      </P>
      <P>三、Jsp方面 </P>
      <P>69、forward 和redirect的区别 </P>
      <P>　　答：forward是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的响应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪儿来的，所以它的地址栏中还是原来的地址。 
      </P>
      <P>　　redirect就是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求，所以session,request参数都可以获取。 
      </P>
      <P>70、jsp有哪些内置对象?作用分别是什么? </P>
      <P>　　答：JSP共有以下9种基本内置组件（可与ASP的6种内部组件相对应）： </P>
      <P>　　request 用户端请求，此请求会包含来自GET/POST请求的参数 <BR>　　response 网页传回用户端的回应 
      <BR>　　pageContext 网页的属性是在这里管理 <BR>　　session 与请求有关的会话期 <BR>　　application 
      servlet正在执行的内容 <BR>　　out 用来传送回应的输出<BR>　　config servlet的构架部件 <BR>　　page 
      JSP网页本身 <BR>　　exception 针对错误网页，未捕捉的例外 </P>
      <P>71、jsp有哪些动作?作用分别是什么? </P>
      <P>　　答:JSP共有以下6种基本动作： </P>
      <P>　　jsp:include：在页面被请求的时候引入一个文件。 <BR>　　jsp:useBean：寻找或者实例化一个JavaBean。 
      <BR>　　jsp:setProperty：设置JavaBean的属性。 
      <BR>　　jsp:getProperty：输出某个JavaBean的属性。 <BR>　　jsp:forward：把请求转到一个新的页面。 
      <BR>　　jsp:plugin：根据浏览器类型为Java插件生成OBJECT或EMBED标记 </P>
      <P>72、JSP中动态INCLUDE与静态INCLUDE的区别？ </P>
      <P>　　答：动态INCLUDE用jsp:include动作实现。&lt;jsp:include page="included.jsp" 
      flush="true" /&gt;它总是会检查所含文件中的变化，适合用于包含动态页面，并且可以带参数 </P>
      <P>　　静态INCLUDE用include伪码实现,定不会检查所含文件的变化，适用于包含静态页面：&lt;%@ include 
      file="included.htm" %&gt; </P>
      <P>73、两种跳转方式分别是什么?有什么区别? </P>
      <P>　　答：有两种，分别为： </P>
      <P>　　&lt;jsp:include page="included.jsp" 
      flush="true"&gt;<BR>　　&lt;jsp:forward page= "nextpage.jsp"/&gt; </P>
      <P>　　前者页面不会转向include所指的页面，只是显示该页的结果，主页面还是原来的页面。执行完后还会回来，相当于函数调用。并且可以带参数.后者完全转向新页面，不会再回来。相当于go 
      to 语句。 </P>
      <P>74、JSP的内置对象及方法。 </P>
      <P>　　答：request表示HttpServletRequest对象。它包含了有关浏览器请求的信息，并且提供了几个用于获取cookie, 
      header, 和session数据的有用的方法。 </P>
      <P>　　response表示HttpServletResponse对象，并提供了几个用于设置送回 浏览器的响应的方法（如cookies,头信息等） 
      </P>
      <P>　　out对象是javax.jsp.JspWriter的一个实例，并提供了几个方法使你能用于向浏览器回送输出结果。 </P>
      <P>　　pageContext表示一个javax.servlet.jsp.PageContext对象。它是用于方便存取各种范围的名字空间、servlet相关的对象的API，并且包装了通用的servlet相关功能的方法。 
      </P>
      <P>　　session表示一个请求的javax.servlet.http.HttpSession对象。Session可以存贮用户的状态信息 
</P>
      <P>　　applicaton 
      表示一个javax.servle.ServletContext对象。这有助于查找有关servlet引擎和servlet环境的信息 </P>
      <P>　　config表示一个javax.servlet.ServletConfig对象。该对象用于存取servlet实例的初始化参数。 </P>
      <P>　　page表示从该页面产生的一个servlet实例 </P>
      <P>四、Servlet方面 </P>
      <P>75、说一说Servlet的生命周期? </P>
      <P>　　答:servlet有良好的生存期的定义，包括加载和实例化、初始化、处理请求以及服务结束。这个生存期由javax.servlet.Servlet接口的init,service和destroy方法表达。 
      Servlet被服务器实例化后，容器运行其init方法，请求到达时运行其service方法，service方法自动派遣运行与请求对应的doXXX方法（doGet，doPost）等，当服务器决定将实例销毁的时候调用其destroy方法。 
      </P>
      <P>　　与cgi的区别在于servlet处于服务器进程中，它通过多线程方式运行其service方法，一个实例可以服务于多个请求，并且其实例一般不会销毁，而CGI对每个请求都产生新的进程，服务完成后就销毁，所以效率上低于servlet。</P></DIV>
      <DIV id=topic_copyright>声明：JavaEye文章版权属于作者，受法律保护。没有作者书面许可不得转载。 </DIV>
      <DIV id=forum_advert_b3><SPAN>推荐链接</SPAN> 
      <UL class=adverts>
        <LI><A href="http://www.javaeye.com/adverts/126" target=_blank><SPAN 
        style="FONT-WEIGHT: bold; COLOR: red">在繁琐中挣扎还是简化自主管理？</SPAN></A>
        <LI><A href="http://www.javaeye.com/adverts/111" target=_blank><SPAN 
        style="FONT-WEIGHT: bold; COLOR: red">Windows7在微软WinHEC 
        2008上揭开神秘面纱</SPAN></A>
        <LI><A href="http://www.javaeye.com/adverts/128" target=_blank>IBM 
        Rational软件开发高峰论坛9月揭幕</A></LI></UL></DIV></TD></TR>
  <TR>
    <TD class=postauthor><A 
    href="http://www.javaeye.com/topic/64789#">返回顶楼</A></TD>
    <TD class=postcontent>
      <DIV class=icons><A class=icon_www title=浏览作者的博客 
      href="http://3www.javaeye.com/">&nbsp;</A> <A class=icon_profile 
      title=浏览作者资料 href="http://3www.javaeye.com/blog/profile">&nbsp;</A> 
    </DIV></TD></TR>
  <TR class=sep2>
    <TD colSpan=2></TD></TR>
  <TR id=p_247503>
    <TD class=postauthor>
      <UL>
        <LI class=name>糖人GG 
        <LI>等级: <IMG title=一星会员 alt=一星会员 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/star1.gif"> 
        <LI><A href="http://tangrengg.javaeye.com/" target=_blank><IMG 
        title="糖人GG的博客: 糖人GG" alt=用户头像 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/619253a5-bc78-40ec-a865-2cffbda92032.jpg"></A> 

        <LI>性别: <IMG title=男 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/icon_minigender_1.gif"> 

        <LI>文章: 55 
        <LI>积分: 101 
        <LI><IMG 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/offline.gif"> 
        </LI></UL></TD>
    <TD class=postcontent>
      <DIV class=postactions>
      <DIV class=description>最后更新时间：2007-03-23 </DIV>
      <DIV class=links></DIV></DIV>
      <DIV class="postbody clearfix">收下，找工作之前熟读这些题目。 </DIV></TD></TR>
  <TR>
    <TD class=postauthor><A 
    href="http://www.javaeye.com/topic/64789#">返回顶楼</A></TD>
    <TD class=postcontent>
      <DIV class=icons><A class=icon_www title=浏览作者的博客 
      href="http://tangrengg.javaeye.com/">&nbsp;</A> <A class=icon_profile 
      title=浏览作者资料 href="http://tangrengg.javaeye.com/blog/profile">&nbsp;</A> 
      </DIV>
      <DIV class=post_rate_box id=post_rate_box_247503><A class=good title=好 
      onclick="return false;" href="http://www.javaeye.com/topic/64789#">0</A> 
      <A class=hidden title=差 onclick="return false;" 
      href="http://www.javaeye.com/topic/64789#">0</A> 请登录后投票</DIV></TD></TR>
  <TR class=sep2>
    <TD colSpan=2></TD></TR>
  <TR id=p_247926>
    <TD class=postauthor>
      <UL>
        <LI class=name>qy33 
        <LI>等级: 初级会员 
        <LI><A href="http://qy33.javaeye.com/" target=_blank><IMG 
        title="qy33的博客: qy33" alt=用户头像 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/user-logo.gif"></A> 

        <LI>性别: <IMG title=男 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/icon_minigender_1.gif"> 

        <LI>文章: 46 
        <LI>积分: 18 
        <LI><IMG 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/offline.gif"> 
        </LI></UL></TD>
    <TD class=postcontent>
      <DIV class=postactions>
      <DIV class=description>最后更新时间：2007-03-24 </DIV>
      <DIV class=links></DIV></DIV>
      <DIV class="postbody clearfix">已阅。 <BR>其实好像以前发过 </DIV></TD></TR>
  <TR>
    <TD class=postauthor><A 
    href="http://www.javaeye.com/topic/64789#">返回顶楼</A></TD>
    <TD class=postcontent>
      <DIV class=icons><A class=icon_www title=浏览作者的博客 
      href="http://qy33.javaeye.com/">&nbsp;</A> <A class=icon_profile 
      title=浏览作者资料 href="http://qy33.javaeye.com/blog/profile">&nbsp;</A> </DIV>
      <DIV class=post_rate_box id=post_rate_box_247926><A class=good title=好 
      onclick="return false;" href="http://www.javaeye.com/topic/64789#">0</A> 
      <A class=hidden title=差 onclick="return false;" 
      href="http://www.javaeye.com/topic/64789#">0</A> 请登录后投票</DIV></TD></TR>
  <TR class=sep2>
    <TD colSpan=2></TD></TR>
  <TR id=p_249986>
    <TD class=postauthor>
      <UL>
        <LI class=name>zhaohuan 
        <LI>等级: 初级会员 
        <LI><A href="http://zhaohuan.javaeye.com/" target=_blank><IMG 
        title="zhaohuan的博客: zhaohuan" alt=用户头像 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/user-logo.gif"></A> 

        <LI>性别: <IMG title=男 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/icon_minigender_1.gif"> 

        <LI>文章: 9 
        <LI>积分: 60 
        <LI>来自: 珠海 
        <LI><IMG 
        src="(转) java程序员面试之150++ (上) - - Job - JavaEye论坛.files/offline.gif"> 
        </LI></UL></TD>
    <TD class=postcontent>
      <DIV class=postactions>
      <DIV class=description>最后更新时间：2007-03-27 </DIV>
      <DIV class=links></DIV></DIV>
      <DIV class="postbody clearfix">谢谢。但有一题不明白。能不能解释详细一点，为什么后面一个就是正确的？ 
      <BR><BR>9、short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错 
      <BR>答：short s1 = 1; s1 = s1 + 1; （s1+1运算结果是int型，需要强制转换类型）short s1 = 1; s1 
      += 1;（可以正确编译） </DIV></TD></TR>
  <TR>
    <TD class=postauthor><A 
    href="http://www.javaeye.com/topic/64789#">返回顶楼</A></TD>
    <TD class=postcontent>
      <DIV class=icons><A class=icon_www title=浏览作者的博客 
      href="http://zhaohuan.javaeye.com/">&nbsp;</A> <A class=icon_profile 
      title=浏览作者资料 href="http://zhaohuan.javaeye.com/blog/profile">&nbsp;</A> 
      </DIV>
      <DIV class=post_rate_box id=post_rate_box_249986><A class=good title=好 
      onclick="return false;" href="http://www.javaeye.com/topic/64789#">0</A> 
      <A class=hidden title=差 onclick="return false;" 
      href="http://www.javaeye.com/topic/64789#">0</A> 请登录后投票</DIV></TD></TR>
  <TR class=sep2>
    <TD colSpan=2></TD></TR></TBODY></TABLE>
<DIV class=actions>
<DIV class=buttons></DIV>
<DIV class=wrapper></DIV></DIV>
<DIV>
<DIV class=crumbs><A href="http://www.javaeye.com/forums">论坛首页</A> <SPAN 
class=arrow>→</SPAN> <A href="http://www.javaeye.com/forums/board/Job">招聘求职版</A> 
<BR><BR>跳转论坛:<SELECT id=forum_urlname 
onchange="window.location='/forums/board/'+this.value" 
  name=forum[urlname]><OPTION value=Java>Java</OPTION> <OPTION 
  value=Ruby>Ruby</OPTION> <OPTION value=AJAX>AJAX</OPTION> <OPTION 
  value=dotnet>Microsoft .Net</OPTION> <OPTION value=Tech>综合技术</OPTION> <OPTION 
  value=New>入门讨论</OPTION> <OPTION value=Agile>软件开发和项目管理</OPTION> <OPTION 
  value=Industry>行业解决方案</OPTION> <OPTION value=company>厂商论坛</OPTION> <OPTION 
  value=Job selected>招聘求职</OPTION> <OPTION value=Life>海阔天空</OPTION></SELECT> 
<DIV id=forum_advert_b2><SPAN>JavaEye推荐</SPAN>
<UL class=adverts></UL></DIV></DIV></DIV>
<DIV style="DISPLAY: none">
<FORM id=post_rate_form 
onsubmit="new Ajax.Request('/posts/rate', {asynchronous:true, evalScripts:true, parameters:Form.serialize(this)}); return false;" 
action=/posts/rate method=post><INPUT id=post_rate_id type=hidden name=id> 
<INPUT id=post_rate_type type=hidden name=type> </FORM></DIV>
<SCRIPT type=text/javascript>
dp.SyntaxHighlighter.ClipboardSwf = '/javascripts/syntaxhighlighter/clipboard.swf';
dp.SyntaxHighlighter.HighlightAll('code', true, true);
  
fix_image_size($$('div.postbody img'), 760);

function rate_post(id, type) {
  Element.update('post_rate_box_' + id, '提交中...');
  new Ajax.Request('/posts/rate', {asynchronous:true, evalScripts:true, parameters:{"id":id, "type":type}});	
}

function rate_topic(type) {
  Element.update('topic_rate_box', '提交中...');
  new Ajax.Request('/topics/rate', {asynchronous:true, evalScripts:true, parameters:{"id":64789, "type":type}});
    }

      
</SCRIPT>
</DIV>
<DIV id=nav>
<DIV class=wrapper>
<UL>
  <LI><A href="http://www.javaeye.com/">首页</A> </LI>
  <LI><A href="http://www.javaeye.com/news">新闻</A> </LI>
  <LI><A class=selected href="http://www.javaeye.com/forums">论坛</A> </LI>
  <LI><A href="http://www.javaeye.com/ask">问答</A> </LI>
  <LI><A href="http://www.javaeye.com/wiki">知识库</A> </LI>
  <LI><A href="http://www.javaeye.com/blogs">博客</A> </LI>
  <LI><A href="http://www.javaeye.com/groups">圈子</A> </LI>
  <LI><A href="http://job.javaeye.com/" target=_blank>招聘 <SPAN 
  style="BORDER-RIGHT: #2be42b 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: #2be42b 1px solid; PADDING-LEFT: 2px; FONT-SIZE: 11px; PADDING-BOTTOM: 0px; BORDER-LEFT: #2be42b 1px solid; PADDING-TOP: 0px; BORDER-BOTTOM: #2be42b 1px solid; BACKGROUND-COLOR: #7de865">New</SPAN></A> 
  </LI>
  <LI><A href="http://www.javaeye.com/index/service">服务</A> </LI>
  <LI class=last><A href="http://www.javaeye.com/search">搜索</A> 
</LI></UL></DIV></DIV>
<DIV id=channel_nav>
<UL>
  <LI><A href="http://java.javaeye.com/">Java</A> </LI>
  <LI><A href="http://ruby.javaeye.com/">Ruby</A> </LI>
  <LI><A href="http://ajax.javaeye.com/">AJAX</A> </LI>
  <LI><A href="http://agile.javaeye.com/">敏捷</A> </LI>
  <LI><A href="http://book.javaeye.com/">图书</A> </LI>
  <LI><A href="http://oracle.javaeye.com/">Oracle</A> </LI>
  <LI class=last><A href="http://primeton.javaeye.com/">普元</A> 
</LI></UL></DIV></DIV>
<DIV id=footer>
<DIV id=site_nav>
<UL>
  <LI><A href="http://www.javaeye.com/index/service">广告服务</A> 
  <LI><A href="http://webmaster.javaeye.com/">JavaEye黑板报</A> 
  <LI><A href="http://www.javaeye.com/index/sitemap">网站地图</A> 
  <LI><A href="http://www.javaeye.com/index/aboutus">关于我们</A> 
  <LI><A href="http://www.javaeye.com/index/contactus">联系我们</A> 
  <LI class=last><A href="http://www.javaeye.com/index/friend_links">友情链接</A> 
  </LI></UL></DIV>
<DIV id=copyright>© 2003-2008 JavaEye.com. All rights reserved. 上海炯耐计算机软件有限公司 [ 
沪ICP备05023328号 ] </DIV></DIV></DIV>
<SCRIPT type=text/javascript>
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</SCRIPT>

<SCRIPT type=text/javascript>
var pageTracker = _gat._getTracker("UA-535605-1");
pageTracker._setDomainName("javaeye.com");
pageTracker._initData();
pageTracker._trackPageview();
</SCRIPT>
</BODY></HTML>
